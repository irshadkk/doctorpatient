package hello;

import java.math.BigInteger;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/app") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private AppointmentsRepository appointmentsRepository;

	@GetMapping(path = "/adduser") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path = "/alluser")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@PostMapping(path = "/addorupdateappointment") // Map ONLY POST Requests
	public @ResponseBody String addNewAppointment(@RequestBody AppointmentsEntity appointmentsEntityObj) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		appointmentsRepository.save(appointmentsEntityObj);
		return "Saved";
	}
	@GetMapping(path = "/deleteappointment") // Map ONLY POST Requests
	public @ResponseBody String deleteAppointment(@RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		appointmentsRepository.deleteById(id);
		return "Deleted";
	}

	@GetMapping(path = "/allappointments")
	public @ResponseBody Iterable<AppointmentsEntity> getAllAppointments(@RequestParam(required = false) String name,
			@RequestParam(required = false) BigInteger startDate,
			@RequestParam(required = false) BigInteger endDate, 
			@RequestParam(required = false) BigInteger mobileNumber) {
		// This returns a JSON or XML with the users
		Iterable<AppointmentsEntity> result = null;
		if (null != name && !"all".equals(name) 
				&& null ==mobileNumber 
				&& null== startDate
				&& null == endDate) {
			result = appointmentsRepository.findByName(name);
		}else  if (null == name 
				&& null !=mobileNumber 
				&& null== startDate
				&& null == endDate) {
			result = appointmentsRepository.findByMobileNumber(mobileNumber);
		} else  if (null == name 
				&& null ==mobileNumber 
				&& null!= startDate
				&& null != endDate) {
			result = appointmentsRepository.findByAppointmentDateBetween(startDate, endDate);
		} else if (null != name && !"all".equals(name) 
				&& null !=mobileNumber 
				&& null== startDate
				&& null == endDate) {
			result = appointmentsRepository.findByNameAndMobileNumber(name,mobileNumber);
		}
		else if (null != name && !"all".equals(name) 
				&& null ==mobileNumber 
				&& null!= startDate
				&& null != endDate) {
			result = appointmentsRepository.findByNameAndAppointmentDateBetween(name,startDate, endDate);
		}
		else if (null == name  
				&& null !=mobileNumber 
				&& null!= startDate
				&& null != endDate) {
			result = appointmentsRepository.findByMobileNumberAndAppointmentDateBetween(mobileNumber,startDate, endDate);
		}
		else if (null != name  && !"all".equals(name) 
				&& null !=mobileNumber 
				&& null!= startDate
				&& null != endDate) {
			result = appointmentsRepository.findByNameAndMobileNumberAndAppointmentDateBetween(name,mobileNumber,startDate, endDate);
		}
		else if ("all".equals(name)) {
			result = appointmentsRepository.findAll();
		}
		return result;

	}
}
